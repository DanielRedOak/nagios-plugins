#!/bin/bash
#set -x
#	Crashplan Check for Nagios
#	Based on the check by Jedda Wignall, updated by Ryan O'Keeffe
#	
#	This script checks Crashplan backups on linux.  It will check for inprogress backups as well as completed backups.  This is useful if there is a large backup running and you want to alert differently vs. alerting only on completed backups.  Critical alerts: if the inital backup is not done, if there is a backup older than critHours, or there is a backup in progress but no completed backup within critHours, or if there is a backup in progress that has stagnated for 1 hour (could be changed to a variable in a later release)

#	Takes three arguments ([-d] cp.properties file in backup destination, [-w] warning threshold in hours, [-c] critical threshold in hours

cpDirectory=""
warnHours=""
critHours=""

while getopts "d:w:c:" optionName; do
case "$optionName" in
d) cpDirectory=("$OPTARG");;
w) warnHours=( $OPTARG );;
c) critHours=( $OPTARG );;
esac
done


currentDate=`date +%s`
# check to see if the cp.properties file exists
if ! [ -f "$cpDirectory" ];
then
	printf "CRITICAL - the CrashPlan backup you pointed to does not exist!\n"
	exit 2
fi

lastCompletedBackupLine=`grep -n -m 1 lastCompletedBackupTimestamp "$cpDirectory"`
if [ -z "$lastCompletedBackupLine" ]; then
	printf "CRITICAL - Could not read the last completed backup date. Has an initial backup occurred?\n"
	exit 2
fi

lastBackupLine=`grep -n -m 1 lastBackupTimestamp "$cpDirectory"`
if [ -z "$lastBackupLine" ]; then
        printf "CRITICAL - Could not read the last backup date. Has an initial backup occurred?\n"
        exit 2
fi

#Potenially in progress backup times
lastBackupDateString=`echo $lastBackupLine | sed 's/.*=//' | sed 's/.\{5\}$//' | sed 's/\\\//g' |sed 's/T/ /' | xargs -0 -I {} date -d {}`
lastBackupDate=$(date -d "$lastBackupDateString" "+%s" )

#Last fully completed backup
lastCompletedBackupDateString=`echo $lastCompletedBackupLine | sed 's/.*=//' | sed 's/.\{5\}$//' | sed 's/\\\//g' |sed 's/T/ /' | xargs -0 -I {} date -d {}`
lastCompletedBackupDate=$(date -d "$lastCompletedBackupDateString" "+%s" )

#Is the latest backup done?
latestDone=$(( $lastBackupDate -  $lastCompletedBackupDate))

completedDiff=$(( $currentDate - $lastCompletedBackupDate))
inProgDiff=$(( $currentDate - $lastBackupDate))
warnSeconds=$(($warnHours * 3600))
critSeconds=$(($critHours * 3600))


if [ "$latestDone" -eq "0" ]; then
	#the lastCompletedBackup was the last active job so check the times

	if [ "$completedDiff" -gt "$critSeconds" ]; then
		#Last completed backup > critical threshold, return critical status.
		printf "CRITICAL - $cpDirectory has not been backed up in more than $critHours hours!\n"
		exit 2
	elif [ "$completedDiff" -gt "$warnSeconds" ]; then
		# warning threshold < Last backup > critical threshold, return warning status.
		printf "WARNING - $cpDirectory has not been backed up in more than $warnHours hours!\n"
		exit 1
	fi

	printf "OK - $cpDirectory has been backed up within the last $warnHours hours.\n"
	exit 0
else
	#There appears to be a job in progress or it has stalled out.  Check this. Could make this a variable
	failSeconds=3600	
	if [ "$inProgDiff" -gt "$failSeconds" ]; then
		#the backup looks to be in progress but has not hit the file in over an hour, CRTITICAL
		printf "CRITICAL - Backup in progress shows to be over an hour without updating cp.properties. Please review history.log.0"
		exit 2
        elif [ "$completedDiff" -gt "$critSeconds" ]; then
                #the backup looks to be in progress but the last full backup is over the critical threshold,  return critical status.
                printf "CRITICAL - Backup in progress: Last full backup is more than $critHours hours old!\n"
                exit 2
        elif [ "$completedDiff" -gt "$warnSeconds" ]; then
                #the backup looks to be in progress but the last full backup is over the warning threshold, return warning status.
                printf "WARNING - Backup in progress: Last full backup is more than $warnHours hours! old\n"
                exit 1
        fi

        printf "OK - $cpDirectory has been backed up within the last $warnHours hours.\n"
        exit 0
fi
